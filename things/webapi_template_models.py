# generated by fastapi-codegen:
#   filename:  openapi.yml
#   timestamp: 2022-04-12T11:47:03+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, constr


class Resource(BaseModel):
    _id: str = Field(..., alias='@id', description='URL of this thing')
    description: Optional[str] = Field(None, description='Description of the thing')


class JobState(BaseModel):
    __root__: constr(regex=r'^(QUEUED|RUNNING|STOPPED)')


class Log(Resource):
    pass


class Workspace(Resource):
    pass


class WorkspaceRequest(BaseModel):
    json_: Optional[Workspace] = Field(None, alias='json')
    workspace: Optional[bytes] = None


class Job(Resource):
    state: Optional[JobState] = None


class OcrdExecutable(BaseModel):
    __root__: constr(regex=r'^ocrd-.*')


class Processor(BaseModel):
    __root__: Any = Field(..., description='The ocrd-tool.json for a specific tool')


class ProcessorList(BaseModel):
    __root__: List[List[Processor]] = Field(
        ..., description='List all available processors'
    )


class ProcessorArgs(BaseModel):
    workspace: Optional[Workspace] = None
    input_file_grps: Optional[str] = None
    output_file_grps: Optional[str] = None
    page_id: Optional[str] = None
    parameters: Optional[Dict[str, Any]] = {}


class ProcessorCall(ProcessorArgs):
    executable: OcrdExecutable


class ProcessorJob(Job):
    processor: Optional[Processor] = None
    workspace: Optional[Workspace] = None


class Workflow(Resource):
    pass


class WorkflowJob(Job):
    workflow: Optional[Workflow] = None
    workspace: Optional[Workspace] = None


class DiscoveryResponse(BaseModel):
    ram: Optional[int] = Field(None, description='All available RAM in bytes')
    cpu_cores: Optional[int] = Field(None, description='Number of available CPU cores')
    has_cuda: Optional[bool] = Field(
        None, description="Whether deployment supports NVIDIA's CUDA"
    )
    cuda_version: Optional[str] = Field(None, description='Major/minor version of CUDA')
    has_ocrd_all: Optional[bool] = Field(
        None, description='Whether deployment is based on ocrd_all'
    )
    ocrd_all_version: Optional[str] = Field(
        None, description='Git tag of the ocrd_all version implemented'
    )
    has_docker: Optional[bool] = Field(
        None, description='Whether the OCR-D executables run in a Docker container'
    )


class Level(Enum):
    debug = 'debug'
    info = 'info'
    warning = 'warning'
    error = 'error'


class LogEntry(BaseModel):
    level: Level = Field(..., description='Log level')
    message: str = Field(..., description='Log message')
    time: Optional[datetime] = Field(None, description='Log UTC time')
